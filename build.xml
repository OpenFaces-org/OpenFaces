<project name="Openfaces" default="build" basedir=".">

  <property environment="env"/>
  <property name="components.dir" location="openFaces"/>

  <buildnumber file="build.number"/>
  <property file="ofversion.properties"/>
  <property name="of-version" value="${ofversion}.40"/>

  <property name="build.compiler" value="javac1.5"/>

  <property name="target.dir" location="target"/>
  <property name="target-lib.dir" location="${target.dir}/lib"/>
  <property name="openfaces-jar.file" location="${target-lib.dir}/openfaces-${of-version}.jar"/>
  <property name="openfaces-weblogic-jar.file" location="${target-lib.dir}/openfaces-${of-version}-weblogic-jsp.jar"/>

  <property name="test-app-jsp.dir" location="testApp/jsp"/>
  <property name="test-app-facelets.dir" location="testApp/facelets"/>
  <property name="live-demo.dir" location="liveDemo/jsp"/>
  <property name="live-demo-facelets.dir" location="liveDemo/facelets"/>
  <property name="target-war" location="target/war"/>
  <property name="target-war.file" location="${target-war}/TestAppFacelets.war"/>

  <property name="funcTests.dir" location="funcTests"/>
  <property name="funcTests-source.dir" location="${funcTests.dir}/source"/>
  <property name="funcTests-target.dir" location="${funcTests.dir}/target"/>
  <property name="funcTests-target-reports.dir" location="${funcTests-target.dir}/test-reports"/>
  <property name="funcTestsFramework.dir" location="openFacesInspectors"/>
  <property name="funcTestsFramework-source.dir" location="${funcTestsFramework.dir}/source"/>
  <property name="funcTestsFramework-target.dir" location="${funcTestsFramework.dir}/out"/>
  <property name="funcTestsFramework-distrib.dir" location="${funcTestsFramework.dir}/distribution"/>
  <property name="funcTestsFramework-temp.dir" location="${funcTestsFramework.dir}/temp"/>
  <property name="openfaces-inspectors-jar.file" location="${funcTestsFramework-distrib.dir}/openfaces-inspectors.jar"/>
  <property name="patched-selenium-server.file"
            location="lib/seleniuminspector/selenium-server-standalone-2.14.0.jar"/>
  <property name="funcTestsFrameworkManifest.file" location="${funcTestsFramework-target.dir}/manifest.mf"/>

  <property name="compile.debug" value="true" />
  <property file="deployment.properties"/>
  <property name="tomcat.home" value="${catalina.home}"/>
  <property name="build.home" value="${basedir}"/>
  <property name="project.lib" value="${basedir}/lib" />

  <path id="catalina.classpath">
    <fileset dir="${tomcat.home}/bin">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${tomcat.home}/lib"/>
    <fileset dir="${tomcat.home}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="init">
    <tstamp/>
  </target>

  <!-- *** Public Targets ** -->

  <target name="build" depends="clean" description="Build OpenFaces core and all the demo applications">
    <mkdir dir="${target.dir}"/>

    <echo>Building OpenFaces core...</echo>
    <ant dir="${components.dir}" target="build" inheritall="false">
      <property name="build.compiler" value="javac1.5"/>
      <property name="target-jar.file" value="${openfaces-jar.file}"/>
      <property name="target-weblogic-jar.file" value="${openfaces-weblogic-jar.file}"/>
      <property name="lib.dir" value="../lib"/>
      <property name="retain.classes.dir" value="true"/>
      <property file="ofversion.properties"/>
    </ant>
    <echo>OpenFaces core built successfully.</echo>

    <echo>Building Test Application (JSP-based version)...</echo>
    <ant dir="${test-app-jsp.dir}" target="build" inheritall="false">
      <property name="openfaces-jar.file" value="${openfaces-jar.file}"/>
      <property name="ofversion" value="${ofversion}"/>
    </ant>
    <echo>Test Application (JSP-based version) built successfully.</echo>

    <echo>Building Test Application (Facelets-based version)...</echo>
    <ant dir="${test-app-facelets.dir}" target="build" inheritall="false">
      <property name="openfaces-jar.file" value="${openfaces-jar.file}"/>
      <property name="ofversion" value="${ofversion}"/>
    </ant>
    <echo>Test Application (Facelets-based version) built successfully.</echo>

    <echo>Building Live Demo (JSP-based version)...</echo>
    <ant dir="${live-demo.dir}" target="build" inheritall="false">
      <property name="openfaces-jar.file" value="${openfaces-jar.file}"/>
      <property name="ofversion" value="${ofversion}"/>
    </ant>
    <echo>Live Demo (JSP-based version) build successfully.</echo>

    <echo>Building Live Demo (Facelets-based version)...</echo>
    <ant dir="${live-demo-facelets.dir}" target="build" inheritall="false">
      <property name="openfaces-jar.file" value="${openfaces-jar.file}"/>
      <property name="ofversion" value="${ofversion}"/>
    </ant>
    <echo>Live Demo (Facelets-based version) build successfully.</echo>

  </target>

  <target name="clean" depends="init" description="clean up">
    <delete dir="${target.dir}"/>
  </target>

  <target name="compile-func-test-framework" description="Compile framework required for functional testing">
    <mkdir dir="${funcTestsFramework-target.dir}"/>
    <javac srcdir="${funcTestsFramework-source.dir}" destdir="${funcTestsFramework-target.dir}"
           debug="true" includeantruntime="false"
           source="1.5" target="1.5">
      <classpath>
        <pathelement path="lib/seleniuminspector/selenium-java-2.14.0.jar"/>
        <pathelement path="lib/seleniuminspector/selenium-server-standalone-2.14.0.jar"/>
        <pathelement path="lib/seleniuminspector/selenium-inspector.jar"/>
        <pathelement path="testLib/junit.jar"/>
        <fileset file="${openfaces-jar.file}"/>
      </classpath>
    </javac>
    <manifest file="${funcTestsFrameworkManifest.file}">
      <attribute name="Implementation-Title" value="OpenFaces Selenium Inspectors"/>
      <attribute name="Implementation-Vendor" value="TeamDev Ltd."/>
    </manifest>
    <mkdir dir="${funcTestsFramework-distrib.dir}"/>
    <jar jarfile="${openfaces-inspectors-jar.file}" basedir="${funcTestsFramework-target.dir}"/>
    <copy file="lib/seleniuminspector/selenium-server-standalone-2.14.0.jar" todir="${funcTestsFramework-distrib.dir}"/>
    <copy file="lib/seleniuminspector/selenium-java-2.14.0.jar" todir="${funcTestsFramework-distrib.dir}"/>
  </target>

  <target name="-fail-if-no-openfaces-jar" unless="openfaces-jar.file">
    <fail>"openfaces-jar.file" property must be specified</fail>
  </target>

  <target name="-fail-if-no-war" unless="target-war.file">
    <fail>"Facelets war file" must be specified</fail>
  </target>

  <target name="compile-func-tests" depends="-fail-if-no-openfaces-jar, compile-func-test-framework" description="Compile functional tests">
    <delete dir="${funcTests-target.dir}/classes"/>
    <mkdir dir="${funcTests-target.dir}/classes"/>
    <javac includeantruntime="false" srcdir="${funcTests-source.dir}" destdir="${funcTests-target.dir}/classes" debug="true" encoding="UTF-8">
      <classpath>
        <pathelement path="${openfaces-jar.file}"/>
        <pathelement path="${openfaces-inspectors-jar.file}"/>
        <pathelement path="testLib/junit.jar"/>
        <pathelement path="testLib/jai/mlibwrapper_jai.jar"/>
        <pathelement path="testLib/jai/jai_core.jar"/>
        <pathelement path="testLib/jai/jai_codec.jar"/>
        <pathelement path="lib/seleniuminspector/selenium-java-2.14.0.jar"/>
        <pathelement path="lib/seleniuminspector/selenium-server-standalone-2.14.0.jar"/>
        <pathelement path="lib/seleniuminspector/selenium-inspector.jar"/>
      </classpath>
    </javac>
    <copy todir="${funcTests-target.dir}/classes">
      <fileset dir="${funcTests-source.dir}">
        <include name="**/*.properties"/>
        <include name="**/*.lic"/>
        <include name="**/*.png"/>
        <include name="**/*.dll"/>
      </fileset>
    </copy>
  </target>

  <target name="run-func-tests" depends="compile-func-tests" description="Run functional tests">
    <antcall target="stop-tomcat-remote"/>
    <antcall target="deploy-tomcat"/>
    <sleep seconds="30"/>

    <parallel>
      <antcall target="start-tomcat-remote"/>

      <sleep seconds="30"/>

      <echo message="Run Functional tests" />
      <antcall target="run-tests" />
    </parallel>
  </target>

  <target name="run-tests">
    <mkdir dir="${funcTests-target-reports.dir}"/>

    <condition property="testAppContextPath" value="${context.path}">
      <not>
        <isset property="test.app.context.path"/>
      </not>
    </condition>
    <condition property="testAppContextPath" value="${test.app.context.path}">
      <isset property="test.app.context.path"/>
    </condition>

    <condition property="demoContextPath" value="${demoContext.path}">
      <not>
        <isset property="demo.context.path"/>
      </not>
    </condition>
    <condition property="demoContextPath" value="${demo.context.path}">
      <isset property="demo.context.path"/>
    </condition>

    <junit fork="yes" forkmode="once" failureproperty="junit_test_failed" dir="${funcTests-target.dir}">
      <classpath>
        <pathelement path="${openfaces-jar.file}"/>
        <pathelement path="lib/seleniuminspector/selenium-server-standalone-2.14.0.jar"/>
        <pathelement path="lib/seleniuminspector/selenium-java-2.14.0.jar"/>
        <pathelement path="lib/seleniuminspector/selenium-inspector.jar"/>
        <pathelement path="lib/mojarra/jsf-api-1.2_12-b01.jar"/>
        <pathelement location="${funcTests-target.dir}/classes"/>
        <pathelement path="${openfaces-inspectors-jar.file}"/>
        <pathelement path="testLib/junit.jar"/>
        <pathelement path="testLib/jai/mlibwrapper_jai.jar"/>
        <pathelement path="testLib/jai/jai_core.jar"/>
        <pathelement path="testLib/jai/jai_codec.jar"/>
        <path refid="catalina.classpath"/>
      </classpath>
      <formatter type="xml"/>
      <formatter usefile="false" type="plain"/>
      <batchtest todir="${funcTests-target-reports.dir}">
        <fileset dir="${funcTests-source.dir}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
      <sysproperty key="test.app.jsf.implementation" value="${jsf.implementation}"/>
      <sysproperty key="test.app.is.facelets" value="${is.facelets}"/>
      <sysproperty key="test.app.context.path" value="${testAppContextPath}"/>
      <sysproperty key="demo.context.path" value="${demoContextPath}"/>
    </junit>

    <copy todir="${funcTests-source.dir}">
      <fileset dir="${funcTests-target.dir}/classes">
        <include name="**/*.png"/>
      </fileset>
    </copy>

    <fail if="junit_test_failed" message="FUNCTIONAL TEST(S) FAILED"/>
  </target>

  <target name="run-func-tests-jsp" description="Run functional tests in JSP-based JSF 1.2 environment">
    <property name="jsf.implementation" value="SUN12"/>
    <property name="is.facelets" value="false"/>
    <property name="context.path" value="/TestAppJsp_2x"/>
    <property name="demoContext.path" value="/LiveDemoJsp_2x"/>
    <antcall target="run-func-tests"/>
  </target>

  <target name="run-func-tests-facelets" description="Run functional tests in Facelets-based JSF 1.2 environment">
    <property name="jsf.implementation" value="SUN12"/>
    <property name="is.facelets" value="true"/>
    <property name="context.path" value="/TestAppFacelets_2x"/>
    <property name="demoContext.path" value="/LiveDemoFacelets_2x"/>
    <antcall target="run-func-tests"/>
  </target>

  <!--Deployment section-->
  <target name="if-has-tomcat">
    <condition property="has.tomcat">
      <available file="${tomcat.home}"/>
    </condition>
    <echo message="Tomcat path: ${tomcat.home}; Check Tomcat exists: ${has.tomcat}"/>
  </target>

  <target name="check-if-deployed" depends="if-has-tomcat" if="has.tomcat">
    <condition property="is.webapp.deployed">
      <http url="${tomcat.server.host}:${tomcat.server.port}/"/>
    </condition>
    <echo message="Check Servlet is already deployed: ${is.webapp.deployed}, by ${tomcat.server.host}:${tomcat.server.port}/"/>
  </target>

  <target name="is-tomcat-running" depends="if-has-tomcat">
    <condition property="if.tomcat.running">
      <socket server="${tomcat.server.host}" port="${tomcat.server.port}" />
    </condition>
  </target>

  <target name="stop-tomcat-remote" depends="is-tomcat-running" if="if.tomcat.running">
    <echo message="Stop server ${tomcat.manager.url}"/>

    <java classname="org.apache.catalina.startup.Bootstrap" fork="true">
      <classpath path="${tomcat.home}/bin/bootstrap.jar:${tomcat.home}/bin/tomcat-juli.jar" />
      <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
      <arg line="stop"/>
    </java>
  </target>

  <target name="start-tomcat-remote">
    <echo message="Tomcat home: ${tomcat.manager.url}"/>

    <java classname="org.apache.catalina.startup.Bootstrap" fork="true">
      <classpath path="${tomcat.home}/bin/bootstrap.jar:${tomcat.home}/bin/tomcat-juli.jar" />
      <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
    </java>
  </target>

  <target name="reload-tomcat-remote">
    <echo message="Reload server"/>
    <antcall target="stop-tomcat-remote"/>

    <echo message="30 seconds delay before restart server"/>
    <sleep seconds="30"/>

    <antcall target="start-tomcat-remote"/>
  </target>

  <target name="deploy-tomcat" depends="compile-func-tests, undeploy-tomcat, -fail-if-no-war"
          description="Install application to Servlet Container">
    <echo message="Installing Application to tomcat server"/>

    <copy file="${target-war.file}" todir="${tomcat.home}/webapps"/>
  </target>

  <target name="undeploy-tomcat" if="has.tomcat"
          description="Install application to Servlet Container">
    <echo message="Removing Application from tomcat server"/>

    <delete file="${target-war.file}"/>
  </target>
</project>
